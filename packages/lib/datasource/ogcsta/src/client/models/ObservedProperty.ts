/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { ObservedPropertyProperties } from './ObservedPropertyProperties'
import {
  ObservedPropertyPropertiesFromJSON,
  ObservedPropertyPropertiesFromJSONTyped,
  ObservedPropertyPropertiesToJSON,
  ObservedPropertyPropertiesToJSONTyped
} from './ObservedPropertyProperties'

/**
 *
 * @export
 * @interface ObservedProperty
 */
export interface ObservedProperty {
  /**
   * The Id of the observed property
   * @type {string}
   * @memberof ObservedProperty
   */
  iotId?: string;
  /**
   * The direct link to the entity
   * @type {string}
   * @memberof ObservedProperty
   */
  iotSelfLink?: string;
  /**
   * A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary
   * @type {string}
   * @memberof ObservedProperty
   */
  definition?: string;
  /**
   * A description of the observed property
   * @type {string}
   * @memberof ObservedProperty
   */
  description?: string;
  /**
   * The label or name of the observed property
   * @type {string}
   * @memberof ObservedProperty
   */
  name?: string;
  /**
   *
   * @type {ObservedPropertyProperties}
   * @memberof ObservedProperty
   */
  properties?: ObservedPropertyProperties;
}

/**
 * Check if a given object implements the ObservedProperty interface.
 */
export function instanceOfObservedProperty(value: object): value is ObservedProperty {
  return true
}

export function ObservedPropertyFromJSON(json: any): ObservedProperty {
  return ObservedPropertyFromJSONTyped(json, false)
}

export function ObservedPropertyFromJSONTyped(json: any, ignoreDiscriminator: boolean): ObservedProperty {
  if (json == null) {
    return json
  }
  return {

    'iotId': json['@iot.id'] == null ? undefined : json['@iot.id'],
    'iotSelfLink': json['@iot.selfLink'] == null ? undefined : json['@iot.selfLink'],
    'definition': json['definition'] == null ? undefined : json['definition'],
    'description': json['description'] == null ? undefined : json['description'],
    'name': json['name'] == null ? undefined : json['name'],
    'properties': json['properties'] == null ? undefined : ObservedPropertyPropertiesFromJSON(json['properties'])
  }
}

export function ObservedPropertyToJSON(json: any): ObservedProperty {
  return ObservedPropertyToJSONTyped(json, false)
}

export function ObservedPropertyToJSONTyped(value?: ObservedProperty | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    '@iot.id': value['iotId'],
    '@iot.selfLink': value['iotSelfLink'],
    'definition': value['definition'],
    'description': value['description'],
    'name': value['name'],
    'properties': ObservedPropertyPropertiesToJSON(value['properties'])
  }
}

