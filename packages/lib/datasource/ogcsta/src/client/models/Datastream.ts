/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { DatastreamUnitOfMeasurement } from './DatastreamUnitOfMeasurement'
import {
  DatastreamUnitOfMeasurementFromJSON,
  DatastreamUnitOfMeasurementFromJSONTyped,
  DatastreamUnitOfMeasurementToJSON,
  DatastreamUnitOfMeasurementToJSONTyped
} from './DatastreamUnitOfMeasurement'
import type { ObservedProperty } from './ObservedProperty'
import {
  ObservedPropertyFromJSON,
  ObservedPropertyFromJSONTyped,
  ObservedPropertyToJSON,
  ObservedPropertyToJSONTyped
} from './ObservedProperty'
import type { DatastreamProperties } from './DatastreamProperties'
import {
  DatastreamPropertiesFromJSON,
  DatastreamPropertiesFromJSONTyped,
  DatastreamPropertiesToJSON,
  DatastreamPropertiesToJSONTyped
} from './DatastreamProperties'
import type { Observation } from './Observation'
import {
  ObservationFromJSON,
  ObservationFromJSONTyped,
  ObservationToJSON,
  ObservationToJSONTyped
} from './Observation'
import type { Thing } from './Thing'
import {
  ThingFromJSON,
  ThingFromJSONTyped,
  ThingToJSON,
  ThingToJSONTyped
} from './Thing'
import type { Sensor } from './Sensor'
import {
  SensorFromJSON,
  SensorFromJSONTyped,
  SensorToJSON,
  SensorToJSONTyped
} from './Sensor'

/**
 *
 * @export
 * @interface Datastream
 */
export interface Datastream {
  /**
   * The Id of the datastream
   * @type {string}
   * @memberof Datastream
   */
  iotId?: string;
  /**
   * The direct link to the entity
   * @type {string}
   * @memberof Datastream
   */
  iotSelfLink?: string;
  /**
   *
   * @type {Array<Observation>}
   * @memberof Datastream
   */
  observations?: Array<Observation>;
  /**
   * The total number of entities in the entityset
   * @type {number}
   * @memberof Datastream
   */
  observationsiotCount?: number;
  /**
   * A link to a related entity or entity set
   * @type {string}
   * @memberof Datastream
   */
  observationsiotNavigationLink?: string;
  /**
   * The link to the next page of entities
   * @type {string}
   * @memberof Datastream
   */
  observationsiotNextLink?: string;
  /**
   *
   * @type {ObservedProperty}
   * @memberof Datastream
   */
  observedProperty?: ObservedProperty;
  /**
   * A link to a related entity or entity set
   * @type {string}
   * @memberof Datastream
   */
  observedPropertyiotNavigationLink?: string;
  /**
   *
   * @type {Sensor}
   * @memberof Datastream
   */
  sensor?: Sensor;
  /**
   * A link to a related entity or entity set
   * @type {string}
   * @memberof Datastream
   */
  sensoriotNavigationLink?: string;
  /**
   *
   * @type {Thing}
   * @memberof Datastream
   */
  thing?: Thing;
  /**
   * A link to a related entity or entity set
   * @type {string}
   * @memberof Datastream
   */
  thingiotNavigationLink?: string;
  /**
   * A description of the datastream
   * @type {string}
   * @memberof Datastream
   */
  description?: string;
  /**
   * The label or name of the datastream
   * @type {string}
   * @memberof Datastream
   */
  name?: string;
  /**
   * The observation type for the datastream, as defined by the OGC Observations and Measurements standard
   * @type {string}
   * @memberof Datastream
   */
  observationType?: string;
  /**
   * The bounding box of the spatial extent of all features of interest associated with observations belonging to the Datastream
   * @type {string}
   * @memberof Datastream
   */
  observedArea?: string;
  /**
   * The range of phenomenon times from all observations belonging to the datastream
   * @type {string}
   * @memberof Datastream
   */
  phenomenonTime?: string;
  /**
   *
   * @type {DatastreamProperties}
   * @memberof Datastream
   */
  properties?: DatastreamProperties;
  /**
   * The range of result times from all observations belonging to the datastream
   * @type {string}
   * @memberof Datastream
   */
  resultTime?: string;
  /**
   *
   * @type {DatastreamUnitOfMeasurement}
   * @memberof Datastream
   */
  unitOfMeasurement?: DatastreamUnitOfMeasurement;
}

/**
 * Check if a given object implements the Datastream interface.
 */
export function instanceOfDatastream(value: object): value is Datastream {
  return true
}

export function DatastreamFromJSON(json: any): Datastream {
  return DatastreamFromJSONTyped(json, false)
}

export function DatastreamFromJSONTyped(json: any, ignoreDiscriminator: boolean): Datastream {
  if (json == null) {
    return json
  }
  return {

    'iotId': json['@iot.id'] == null ? undefined : json['@iot.id'],
    'iotSelfLink': json['@iot.selfLink'] == null ? undefined : json['@iot.selfLink'],
    'observations': json['Observations'] == null ? undefined : ((json['Observations'] as Array<any>).map(ObservationFromJSON)),
    'observationsiotCount': json['Observations@iot.count'] == null ? undefined : json['Observations@iot.count'],
    'observationsiotNavigationLink': json['Observations@iot.navigationLink'] == null ? undefined : json['Observations@iot.navigationLink'],
    'observationsiotNextLink': json['Observations@iot.nextLink'] == null ? undefined : json['Observations@iot.nextLink'],
    'observedProperty': json['ObservedProperty'] == null ? undefined : ObservedPropertyFromJSON(json['ObservedProperty']),
    'observedPropertyiotNavigationLink': json['ObservedProperty@iot.navigationLink'] == null ? undefined : json['ObservedProperty@iot.navigationLink'],
    'sensor': json['Sensor'] == null ? undefined : SensorFromJSON(json['Sensor']),
    'sensoriotNavigationLink': json['Sensor@iot.navigationLink'] == null ? undefined : json['Sensor@iot.navigationLink'],
    'thing': json['Thing'] == null ? undefined : ThingFromJSON(json['Thing']),
    'thingiotNavigationLink': json['Thing@iot.navigationLink'] == null ? undefined : json['Thing@iot.navigationLink'],
    'description': json['description'] == null ? undefined : json['description'],
    'name': json['name'] == null ? undefined : json['name'],
    'observationType': json['observationType'] == null ? undefined : json['observationType'],
    'observedArea': json['observedArea'] == null ? undefined : json['observedArea'],
    'phenomenonTime': json['phenomenonTime'] == null ? undefined : json['phenomenonTime'],
    'properties': json['properties'] == null ? undefined : DatastreamPropertiesFromJSON(json['properties']),
    'resultTime': json['resultTime'] == null ? undefined : json['resultTime'],
    'unitOfMeasurement': json['unitOfMeasurement'] == null ? undefined : DatastreamUnitOfMeasurementFromJSON(json['unitOfMeasurement'])
  }
}

export function DatastreamToJSON(json: any): Datastream {
  return DatastreamToJSONTyped(json, false)
}

export function DatastreamToJSONTyped(value?: Datastream | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    '@iot.id': value['iotId'],
    '@iot.selfLink': value['iotSelfLink'],
    'Observations': value['observations'] == null ? undefined : ((value['observations'] as Array<any>).map(ObservationToJSON)),
    'Observations@iot.count': value['observationsiotCount'],
    'Observations@iot.navigationLink': value['observationsiotNavigationLink'],
    'Observations@iot.nextLink': value['observationsiotNextLink'],
    'ObservedProperty': ObservedPropertyToJSON(value['observedProperty']),
    'ObservedProperty@iot.navigationLink': value['observedPropertyiotNavigationLink'],
    'Sensor': SensorToJSON(value['sensor']),
    'Sensor@iot.navigationLink': value['sensoriotNavigationLink'],
    'Thing': ThingToJSON(value['thing']),
    'Thing@iot.navigationLink': value['thingiotNavigationLink'],
    'description': value['description'],
    'name': value['name'],
    'observationType': value['observationType'],
    'observedArea': value['observedArea'],
    'phenomenonTime': value['phenomenonTime'],
    'properties': DatastreamPropertiesToJSON(value['properties']),
    'resultTime': value['resultTime'],
    'unitOfMeasurement': DatastreamUnitOfMeasurementToJSON(value['unitOfMeasurement'])
  }
}

