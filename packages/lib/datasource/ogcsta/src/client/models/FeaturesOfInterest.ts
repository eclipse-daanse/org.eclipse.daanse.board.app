/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { FeatureOfInterest } from './FeatureOfInterest'
import {
  FeatureOfInterestFromJSON,
  FeatureOfInterestFromJSONTyped,
  FeatureOfInterestToJSON,
  FeatureOfInterestToJSONTyped
} from './FeatureOfInterest'

/**
 *
 * @export
 * @interface FeaturesOfInterest
 */
export interface FeaturesOfInterest {
  /**
   * The total number of entities in the entityset
   * @type {number}
   * @memberof FeaturesOfInterest
   */
  iotCount?: number;
  /**
   * The link to the next page of entities
   * @type {string}
   * @memberof FeaturesOfInterest
   */
  iotNextLink?: string;
  /**
   *
   * @type {Array<FeatureOfInterest>}
   * @memberof FeaturesOfInterest
   */
  value?: Array<FeatureOfInterest>;
}

/**
 * Check if a given object implements the FeaturesOfInterest interface.
 */
export function instanceOfFeaturesOfInterest(value: object): value is FeaturesOfInterest {
  return true
}

export function FeaturesOfInterestFromJSON(json: any): FeaturesOfInterest {
  return FeaturesOfInterestFromJSONTyped(json, false)
}

export function FeaturesOfInterestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeaturesOfInterest {
  if (json == null) {
    return json
  }
  return {

    'iotCount': json['@iot.count'] == null ? undefined : json['@iot.count'],
    'iotNextLink': json['@iot.nextLink'] == null ? undefined : json['@iot.nextLink'],
    'value': json['value'] == null ? undefined : ((json['value'] as Array<any>).map(FeatureOfInterestFromJSON))
  }
}

export function FeaturesOfInterestToJSON(json: any): FeaturesOfInterest {
  return FeaturesOfInterestToJSONTyped(json, false)
}

export function FeaturesOfInterestToJSONTyped(value?: FeaturesOfInterest | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    '@iot.count': value['iotCount'],
    '@iot.nextLink': value['iotNextLink'],
    'value': value['value'] == null ? undefined : ((value['value'] as Array<any>).map(FeatureOfInterestToJSON))
  }
}

