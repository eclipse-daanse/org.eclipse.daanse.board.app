/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface FeatureOfInterestProperties
 */
export interface FeatureOfInterestProperties {
  /**
   * The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  senId?: string;
  /**
   * Indicates the feature of interest type, set to 'SEN_LOC' (Sensor Location) or 'BOREHOLE'
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  type?: string;
  /**
   * The elevation (Z) of the sensor location (type 'SEN_LOC' only)
   * @type {number}
   * @memberof FeatureOfInterestProperties
   */
  z?: number;
  /**
   * The vertical co-ordinate reference system of the Z value (type 'SEN_LOC' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  zCrs?: string;
  /**
   * The time from which the sensor location is effective (type 'SEN_LOC' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  fromDate?: string;
  /**
   * The time from which the sensor location is no longer effective, where it is not set the location is still active (type 'SEN_LOC' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  toDate?: string;
  /**
   * A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type 'SEN_LOC' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  activeYn?: string;
  /**
   * The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type 'BOREHOLE' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  sobiBgsId?: string;
  /**
   * The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type 'BOREHOLE' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  boreholeId?: string;
  /**
   * The drilled length of the borehole in metres (type 'BOREHOLE' only)
   * @type {number}
   * @memberof FeatureOfInterestProperties
   */
  drilledLength?: number;
  /**
   * An alternative name by which the borehole is known (type 'BOREHOLE' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  reference?: string;
  /**
   * Indicates the source of the 'reference' property (type 'BOREHOLE' only)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  referenceType?: string;
  /**
   * A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)
   * @type {string}
   * @memberof FeatureOfInterestProperties
   */
  publishYn?: string;
}

/**
 * Check if a given object implements the FeatureOfInterestProperties interface.
 */
export function instanceOfFeatureOfInterestProperties(value: object): value is FeatureOfInterestProperties {
  return true
}

export function FeatureOfInterestPropertiesFromJSON(json: any): FeatureOfInterestProperties {
  return FeatureOfInterestPropertiesFromJSONTyped(json, false)
}

export function FeatureOfInterestPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureOfInterestProperties {
  if (json == null) {
    return json
  }
  return {

    'senId': json['sen_id'] == null ? undefined : json['sen_id'],
    'type': json['type'] == null ? undefined : json['type'],
    'z': json['z'] == null ? undefined : json['z'],
    'zCrs': json['z_crs'] == null ? undefined : json['z_crs'],
    'fromDate': json['from_date'] == null ? undefined : json['from_date'],
    'toDate': json['to_date'] == null ? undefined : json['to_date'],
    'activeYn': json['active_yn&quot;'] == null ? undefined : json['active_yn&quot;'],
    'sobiBgsId': json['sobi_bgs_id'] == null ? undefined : json['sobi_bgs_id'],
    'boreholeId': json['borehole_id'] == null ? undefined : json['borehole_id'],
    'drilledLength': json['drilled_length'] == null ? undefined : json['drilled_length'],
    'reference': json['reference'] == null ? undefined : json['reference'],
    'referenceType': json['reference_type'] == null ? undefined : json['reference_type'],
    'publishYn': json['publish_yn'] == null ? undefined : json['publish_yn']
  }
}

export function FeatureOfInterestPropertiesToJSON(json: any): FeatureOfInterestProperties {
  return FeatureOfInterestPropertiesToJSONTyped(json, false)
}

export function FeatureOfInterestPropertiesToJSONTyped(value?: FeatureOfInterestProperties | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    'sen_id': value['senId'],
    'type': value['type'],
    'z': value['z'],
    'z_crs': value['zCrs'],
    'from_date': value['fromDate'],
    'to_date': value['toDate'],
    'active_yn&quot;': value['activeYn'],
    'sobi_bgs_id': value['sobiBgsId'],
    'borehole_id': value['boreholeId'],
    'drilled_length': value['drilledLength'],
    'reference': value['reference'],
    'reference_type': value['referenceType'],
    'publish_yn': value['publishYn']
  }
}

