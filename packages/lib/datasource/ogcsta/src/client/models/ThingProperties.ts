/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface ThingProperties
 */
export interface ThingProperties {
  /**
   * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)
   * @type {string}
   * @memberof ThingProperties
   */
  senId?: string;
  /**
   * Indicates the type of thing, set to 'SENSOR'
   * @type {string}
   * @memberof ThingProperties
   */
  type?: string;
  /**
   * The serial number of the physical sensor currently installed if known
   * @type {string}
   * @memberof ThingProperties
   */
  serialNo?: string;
  /**
   * Indicates how data from the thing is captured (Telemetered, Manual)
   * @type {string}
   * @memberof ThingProperties
   */
  dataCapture?: string;
  /**
   * The earliest observation date for which data from the thing will be available in the API
   * @type {string}
   * @memberof ThingProperties
   */
  observationStartDate?: string;
  /**
   * The elevation (Z) of the thing's datum
   * @type {number}
   * @memberof ThingProperties
   */
  datumZ?: number;
  /**
   * The vertical co-ordinate reference system of the 'datum_z' value
   * @type {string}
   * @memberof ThingProperties
   */
  datumZCrs?: string;
  /**
   * The label or name for the thing's datum
   * @type {string}
   * @memberof ThingProperties
   */
  datumName?: string;
  /**
   * The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)
   * @type {string}
   * @memberof ThingProperties
   */
  boreholeReference?: string;
  /**
   * A description of any access restrictions that apply to metadata and observations associated with this thing
   * @type {string}
   * @memberof ThingProperties
   */
  accessRestriction?: string;
  /**
   * A description of any restrictions that apply to the use of metadata and observations from this thing
   * @type {string}
   * @memberof ThingProperties
   */
  dataUsage?: string;
  /**
   * A flag to indicate whether details of this thing can be publicly released (set to Y or N)
   * @type {string}
   * @memberof ThingProperties
   */
  publishYn?: string;
}

/**
 * Check if a given object implements the ThingProperties interface.
 */
export function instanceOfThingProperties(value: object): value is ThingProperties {
  return true
}

export function ThingPropertiesFromJSON(json: any): ThingProperties {
  return ThingPropertiesFromJSONTyped(json, false)
}

export function ThingPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThingProperties {
  if (json == null) {
    return json
  }
  return {

    'senId': json['sen_id'] == null ? undefined : json['sen_id'],
    'type': json['type'] == null ? undefined : json['type'],
    'serialNo': json['serial_no'] == null ? undefined : json['serial_no'],
    'dataCapture': json['data_capture'] == null ? undefined : json['data_capture'],
    'observationStartDate': json['observation_start_date'] == null ? undefined : json['observation_start_date'],
    'datumZ': json['datum_z'] == null ? undefined : json['datum_z'],
    'datumZCrs': json['datum_z_crs'] == null ? undefined : json['datum_z_crs'],
    'datumName': json['datum_name'] == null ? undefined : json['datum_name'],
    'boreholeReference': json['borehole_reference'] == null ? undefined : json['borehole_reference'],
    'accessRestriction': json['access_restriction'] == null ? undefined : json['access_restriction'],
    'dataUsage': json['data_usage'] == null ? undefined : json['data_usage'],
    'publishYn': json['publish_yn&quot;'] == null ? undefined : json['publish_yn&quot;']
  }
}

export function ThingPropertiesToJSON(json: any): ThingProperties {
  return ThingPropertiesToJSONTyped(json, false)
}

export function ThingPropertiesToJSONTyped(value?: ThingProperties | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    'sen_id': value['senId'],
    'type': value['type'],
    'serial_no': value['serialNo'],
    'data_capture': value['dataCapture'],
    'observation_start_date': value['observationStartDate'],
    'datum_z': value['datumZ'],
    'datum_z_crs': value['datumZCrs'],
    'datum_name': value['datumName'],
    'borehole_reference': value['boreholeReference'],
    'access_restriction': value['accessRestriction'],
    'data_usage': value['dataUsage'],
    'publish_yn&quot;': value['publishYn']
  }
}

