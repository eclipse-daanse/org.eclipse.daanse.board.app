/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { FeatureOfInterestProperties } from './FeatureOfInterestProperties'
import {
  FeatureOfInterestPropertiesFromJSON,
  FeatureOfInterestPropertiesFromJSONTyped,
  FeatureOfInterestPropertiesToJSON,
  FeatureOfInterestPropertiesToJSONTyped
} from './FeatureOfInterestProperties'
import type { Observation } from './Observation'
import {
  ObservationFromJSON,
  ObservationFromJSONTyped,
  ObservationToJSON,
  ObservationToJSONTyped
} from './Observation'

/**
 *
 * @export
 * @interface FeatureOfInterest
 */
export interface FeatureOfInterest {
  /**
   * The Id of the feature of interest
   * @type {string}
   * @memberof FeatureOfInterest
   */
  iotId?: string;
  /**
   * The direct link to the entity
   * @type {string}
   * @memberof FeatureOfInterest
   */
  iotSelfLink?: string;
  /**
   *
   * @type {Array<Observation>}
   * @memberof FeatureOfInterest
   */
  observations?: Array<Observation>;
  /**
   * The total number of entities in the entityset
   * @type {number}
   * @memberof FeatureOfInterest
   */
  observationsiotCount?: number;
  /**
   * A link to a related entity or entity set
   * @type {string}
   * @memberof FeatureOfInterest
   */
  observationsiotNavigationLink?: string;
  /**
   * The link to the next page of entities
   * @type {string}
   * @memberof FeatureOfInterest
   */
  observationsiotNextLink?: string;
  /**
   * A description of the feature of interest
   * @type {string}
   * @memberof FeatureOfInterest
   */
  description?: string;
  /**
   * The encoding type of the 'feature' property
   * @type {string}
   * @memberof FeatureOfInterest
   */
  encodingType?: string;
  /**
   * The detailed description of the feature of interest, recorded in line with the type defined by the 'encodingType' property
   * @type {string}
   * @memberof FeatureOfInterest
   */
  feature?: string;
  /**
   * The label or name of the feature of interest
   * @type {string}
   * @memberof FeatureOfInterest
   */
  name?: string;
  /**
   *
   * @type {FeatureOfInterestProperties}
   * @memberof FeatureOfInterest
   */
  properties?: FeatureOfInterestProperties;
}

/**
 * Check if a given object implements the FeatureOfInterest interface.
 */
export function instanceOfFeatureOfInterest(value: object): value is FeatureOfInterest {
  return true
}

export function FeatureOfInterestFromJSON(json: any): FeatureOfInterest {
  return FeatureOfInterestFromJSONTyped(json, false)
}

export function FeatureOfInterestFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureOfInterest {
  if (json == null) {
    return json
  }
  return {

    'iotId': json['@iot.id'] == null ? undefined : json['@iot.id'],
    'iotSelfLink': json['@iot.selfLink'] == null ? undefined : json['@iot.selfLink'],
    'observations': json['Observations'] == null ? undefined : ((json['Observations'] as Array<any>).map(ObservationFromJSON)),
    'observationsiotCount': json['Observations@iot.count'] == null ? undefined : json['Observations@iot.count'],
    'observationsiotNavigationLink': json['Observations@iot.navigationLink'] == null ? undefined : json['Observations@iot.navigationLink'],
    'observationsiotNextLink': json['Observations@iot.nextLink'] == null ? undefined : json['Observations@iot.nextLink'],
    'description': json['description'] == null ? undefined : json['description'],
    'encodingType': json['encodingType'] == null ? undefined : json['encodingType'],
    'feature': json['feature'] == null ? undefined : json['feature'],
    'name': json['name'] == null ? undefined : json['name'],
    'properties': json['properties'] == null ? undefined : FeatureOfInterestPropertiesFromJSON(json['properties'])
  }
}

export function FeatureOfInterestToJSON(json: any): FeatureOfInterest {
  return FeatureOfInterestToJSONTyped(json, false)
}

export function FeatureOfInterestToJSONTyped(value?: FeatureOfInterest | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    '@iot.id': value['iotId'],
    '@iot.selfLink': value['iotSelfLink'],
    'Observations': value['observations'] == null ? undefined : ((value['observations'] as Array<any>).map(ObservationToJSON)),
    'Observations@iot.count': value['observationsiotCount'],
    'Observations@iot.navigationLink': value['observationsiotNavigationLink'],
    'Observations@iot.nextLink': value['observationsiotNextLink'],
    'description': value['description'],
    'encodingType': value['encodingType'],
    'feature': value['feature'],
    'name': value['name'],
    'properties': FeatureOfInterestPropertiesToJSON(value['properties'])
  }
}

