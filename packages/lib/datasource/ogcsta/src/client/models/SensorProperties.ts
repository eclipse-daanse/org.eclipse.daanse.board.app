/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface SensorProperties
 */
export interface SensorProperties {
  /**
   * The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)
   * @type {string}
   * @memberof SensorProperties
   */
  senId?: string;
  /**
   * A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)
   * @type {string}
   * @memberof SensorProperties
   */
  complexDataYn?: string;
  /**
   * A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)
   * @type {string}
   * @memberof SensorProperties
   */
  publishYn?: string;
}

/**
 * Check if a given object implements the SensorProperties interface.
 */
export function instanceOfSensorProperties(value: object): value is SensorProperties {
  return true
}

export function SensorPropertiesFromJSON(json: any): SensorProperties {
  return SensorPropertiesFromJSONTyped(json, false)
}

export function SensorPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): SensorProperties {
  if (json == null) {
    return json
  }
  return {

    'senId': json['sen_id'] == null ? undefined : json['sen_id'],
    'complexDataYn': json['complex_data_yn&quot;'] == null ? undefined : json['complex_data_yn&quot;'],
    'publishYn': json['publish_yn&quot;'] == null ? undefined : json['publish_yn&quot;']
  }
}

export function SensorPropertiesToJSON(json: any): SensorProperties {
  return SensorPropertiesToJSONTyped(json, false)
}

export function SensorPropertiesToJSONTyped(value?: SensorProperties | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    'sen_id': value['senId'],
    'complex_data_yn&quot;': value['complexDataYn'],
    'publish_yn&quot;': value['publishYn']
  }
}

