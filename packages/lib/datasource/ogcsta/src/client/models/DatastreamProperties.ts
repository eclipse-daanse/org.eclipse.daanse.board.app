/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface DatastreamProperties
 */
export interface DatastreamProperties {
  /**
   * The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)
   * @type {string}
   * @memberof DatastreamProperties
   */
  senId?: string;
  /**
   * The type of data provided by the datastream (Measured or Calculated), derived from the observed property
   * @type {string}
   * @memberof DatastreamProperties
   */
  dataType?: string;
  /**
   * A description of any access restrictions that apply to metadata and observations associated with this datastream
   * @type {string}
   * @memberof DatastreamProperties
   */
  accessRestriction?: string;
  /**
   * A description of any restrictions that apply to the use of metadata and observations from this datastream
   * @type {string}
   * @memberof DatastreamProperties
   */
  dataUsage?: string;
  /**
   * A flag to indicate whether details of this datastream can be publicly released (set to Y or N)
   * @type {string}
   * @memberof DatastreamProperties
   */
  publishYn?: string;
}

/**
 * Check if a given object implements the DatastreamProperties interface.
 */
export function instanceOfDatastreamProperties(value: object): value is DatastreamProperties {
  return true
}

export function DatastreamPropertiesFromJSON(json: any): DatastreamProperties {
  return DatastreamPropertiesFromJSONTyped(json, false)
}

export function DatastreamPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): DatastreamProperties {
  if (json == null) {
    return json
  }
  return {

    'senId': json['sen_id'] == null ? undefined : json['sen_id'],
    'dataType': json['data_type'] == null ? undefined : json['data_type'],
    'accessRestriction': json['access_restriction'] == null ? undefined : json['access_restriction'],
    'dataUsage': json['data_usage'] == null ? undefined : json['data_usage'],
    'publishYn': json['publish_yn&quot;'] == null ? undefined : json['publish_yn&quot;']
  }
}

export function DatastreamPropertiesToJSON(json: any): DatastreamProperties {
  return DatastreamPropertiesToJSONTyped(json, false)
}

export function DatastreamPropertiesToJSONTyped(value?: DatastreamProperties | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    'sen_id': value['senId'],
    'data_type': value['dataType'],
    'access_restriction': value['accessRestriction'],
    'data_usage': value['dataUsage'],
    'publish_yn&quot;': value['publishYn']
  }
}

