/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { LocationProperties } from './LocationProperties'
import {
  LocationPropertiesFromJSON,
  LocationPropertiesFromJSONTyped,
  LocationPropertiesToJSON,
  LocationPropertiesToJSONTyped
} from './LocationProperties'
import type { Thing } from './Thing'
import {
  ThingFromJSON,
  ThingFromJSONTyped,
  ThingToJSON,
  ThingToJSONTyped
} from './Thing'

/**
 *
 * @export
 * @interface Location
 */
export interface Location {
  /**
   * The Id of the location
   * @type {string}
   * @memberof Location
   */
  iotId?: string;
  /**
   * The direct link to the entity
   * @type {string}
   * @memberof Location
   */
  iotSelfLink?: string;
  /**
   *
   * @type {Array<Thing>}
   * @memberof Location
   */
  things?: Array<Thing>;
  /**
   * The total number of entities in the entityset
   * @type {number}
   * @memberof Location
   */
  thingsiotCount?: number;
  /**
   * A link to a related entity or entity set
   * @type {string}
   * @memberof Location
   */
  thingsiotNavigationLink?: string;
  /**
   * The link to the next page of entities
   * @type {string}
   * @memberof Location
   */
  thingsiotNextLink?: string;
  /**
   * A description of the location
   * @type {string}
   * @memberof Location
   */
  description?: string;
  /**
   * The encoding type of the 'location' property
   * @type {string}
   * @memberof Location
   */
  encodingType?: string;
  /**
   * The location, recorded in line with the type defined by the 'encodingType' property
   * @type {string}
   * @memberof Location
   */
  location?: string;
  /**
   * The label or name of the location
   * @type {string}
   * @memberof Location
   */
  name?: string;
  /**
   *
   * @type {LocationProperties}
   * @memberof Location
   */
  properties?: LocationProperties;
}

/**
 * Check if a given object implements the Location interface.
 */
export function instanceOfLocation(value: object): value is Location {
  return true
}

export function LocationFromJSON(json: any): Location {
  return LocationFromJSONTyped(json, false)
}

export function LocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Location {
  if (json == null) {
    return json
  }
  return {

    'iotId': json['@iot.id'] == null ? undefined : json['@iot.id'],
    'iotSelfLink': json['@iot.selfLink'] == null ? undefined : json['@iot.selfLink'],
    'things': json['Things'] == null ? undefined : ((json['Things'] as Array<any>).map(ThingFromJSON)),
    'thingsiotCount': json['Things@iot.count'] == null ? undefined : json['Things@iot.count'],
    'thingsiotNavigationLink': json['Things@iot.navigationLink'] == null ? undefined : json['Things@iot.navigationLink'],
    'thingsiotNextLink': json['Things@iot.nextLink'] == null ? undefined : json['Things@iot.nextLink'],
    'description': json['description'] == null ? undefined : json['description'],
    'encodingType': json['encodingType'] == null ? undefined : json['encodingType'],
    'location': json['location'] == null ? undefined : json['location'],
    'name': json['name'] == null ? undefined : json['name'],
    'properties': json['properties'] == null ? undefined : LocationPropertiesFromJSON(json['properties'])
  }
}

export function LocationToJSON(json: any): Location {
  return LocationToJSONTyped(json, false)
}

export function LocationToJSONTyped(value?: Location | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    '@iot.id': value['iotId'],
    '@iot.selfLink': value['iotSelfLink'],
    'Things': value['things'] == null ? undefined : ((value['things'] as Array<any>).map(ThingToJSON)),
    'Things@iot.count': value['thingsiotCount'],
    'Things@iot.navigationLink': value['thingsiotNavigationLink'],
    'Things@iot.nextLink': value['thingsiotNextLink'],
    'description': value['description'],
    'encodingType': value['encodingType'],
    'location': value['location'],
    'name': value['name'],
    'properties': LocationPropertiesToJSON(value['properties'])
  }
}

