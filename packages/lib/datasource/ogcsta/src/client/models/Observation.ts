/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'
import type { ObservationParameters } from './ObservationParameters'
import {
  ObservationParametersFromJSON,
  ObservationParametersFromJSONTyped,
  ObservationParametersToJSON,
  ObservationParametersToJSONTyped
} from './ObservationParameters'

/**
 *
 * @export
 * @interface Observation
 */
export interface Observation {
  /**
   * The Id of the observation
   * @type {string}
   * @memberof Observation
   */
  iotId?: string;
  /**
   * The direct link to the entity
   * @type {string}
   * @memberof Observation
   */
  iotSelfLink?: string;
  /**
   *
   * @type {ObservationParameters}
   * @memberof Observation
   */
  parameters?: ObservationParameters;
  /**
   * The time when the observation happened
   * @type {string}
   * @memberof Observation
   */
  phenomenonTime?: string;
  /**
   * The estimated value of the observed property
   * @type {string}
   * @memberof Observation
   */
  result?: string;
  /**
   * A description of the quality of the result
   * @type {string}
   * @memberof Observation
   */
  resultQuality?: string;
  /**
   * The time the result was generated
   * @type {string}
   * @memberof Observation
   */
  resultTime?: string;
  /**
   * The time period during which the result can be used
   * @type {string}
   * @memberof Observation
   */
  validTime?: string;
}

/**
 * Check if a given object implements the Observation interface.
 */
export function instanceOfObservation(value: object): value is Observation {
  return true
}

export function ObservationFromJSON(json: any): Observation {
  return ObservationFromJSONTyped(json, false)
}

export function ObservationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Observation {
  if (json == null) {
    return json
  }
  return {

    'iotId': json['@iot.id'] == null ? undefined : json['@iot.id'],
    'iotSelfLink': json['@iot.selfLink'] == null ? undefined : json['@iot.selfLink'],
    'parameters': json['parameters'] == null ? undefined : ObservationParametersFromJSON(json['parameters']),
    'phenomenonTime': json['phenomenonTime'] == null ? undefined : json['phenomenonTime'],
    'result': json['result'] == null ? undefined : json['result'],
    'resultQuality': json['resultQuality'] == null ? undefined : json['resultQuality'],
    'resultTime': json['resultTime'] == null ? undefined : json['resultTime'],
    'validTime': json['validTime'] == null ? undefined : json['validTime']
  }
}

export function ObservationToJSON(json: any): Observation {
  return ObservationToJSONTyped(json, false)
}

export function ObservationToJSONTyped(value?: Observation | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    '@iot.id': value['iotId'],
    '@iot.selfLink': value['iotSelfLink'],
    'parameters': ObservationParametersToJSON(value['parameters']),
    'phenomenonTime': value['phenomenonTime'],
    'result': value['result'],
    'resultQuality': value['resultQuality'],
    'resultTime': value['resultTime'],
    'validTime': value['validTime']
  }
}

