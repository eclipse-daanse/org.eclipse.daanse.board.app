/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime'

/**
 *
 * @export
 * @interface LocationProperties
 */
export interface LocationProperties {
  /**
   * The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)
   * @type {string}
   * @memberof LocationProperties
   */
  senId?: string;
  /**
   * The name of the site to which the location belongs
   * @type {string}
   * @memberof LocationProperties
   */
  site?: string;
  /**
   * The name of the observatory to which the location belongs
   * @type {string}
   * @memberof LocationProperties
   */
  observatory?: string;
  /**
   * The elevation (Z) of the location
   * @type {number}
   * @memberof LocationProperties
   */
  z?: number;
  /**
   * The vertical co-ordinate reference system of the Z value
   * @type {string}
   * @memberof LocationProperties
   */
  zCrs?: string;
  /**
   * The time from which the location is effective
   * @type {string}
   * @memberof LocationProperties
   */
  fromDate?: string;
  /**
   * The time from which the location is no longer effective, where it is not set the location is still active
   * @type {string}
   * @memberof LocationProperties
   */
  toDate?: string;
  /**
   * Any additional information about the location where available
   * @type {string}
   * @memberof LocationProperties
   */
  comments?: string;
  /**
   * A flag to indicate whether the location is the active location for a thing (set to Y or N)
   * @type {string}
   * @memberof LocationProperties
   */
  activeYn?: string;
  /**
   * A flag to indicate whether details of this location can be publicly released (set to Y or N)
   * @type {string}
   * @memberof LocationProperties
   */
  publishYn?: string;
}

/**
 * Check if a given object implements the LocationProperties interface.
 */
export function instanceOfLocationProperties(value: object): value is LocationProperties {
  return true
}

export function LocationPropertiesFromJSON(json: any): LocationProperties {
  return LocationPropertiesFromJSONTyped(json, false)
}

export function LocationPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationProperties {
  if (json == null) {
    return json
  }
  return {

    'senId': json['sen_id'] == null ? undefined : json['sen_id'],
    'site': json['site'] == null ? undefined : json['site'],
    'observatory': json['observatory'] == null ? undefined : json['observatory'],
    'z': json['z'] == null ? undefined : json['z'],
    'zCrs': json['z_crs'] == null ? undefined : json['z_crs'],
    'fromDate': json['from_date'] == null ? undefined : json['from_date'],
    'toDate': json['to_date'] == null ? undefined : json['to_date'],
    'comments': json['comments'] == null ? undefined : json['comments'],
    'activeYn': json['active_yn&quot;'] == null ? undefined : json['active_yn&quot;'],
    'publishYn': json['publish_yn&quot;'] == null ? undefined : json['publish_yn&quot;']
  }
}

export function LocationPropertiesToJSON(json: any): LocationProperties {
  return LocationPropertiesToJSONTyped(json, false)
}

export function LocationPropertiesToJSONTyped(value?: LocationProperties | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value
  }

  return {

    'sen_id': value['senId'],
    'site': value['site'],
    'observatory': value['observatory'],
    'z': value['z'],
    'z_crs': value['zCrs'],
    'from_date': value['fromDate'],
    'to_date': value['toDate'],
    'comments': value['comments'],
    'active_yn&quot;': value['activeYn'],
    'publish_yn&quot;': value['publishYn']
  }
}

