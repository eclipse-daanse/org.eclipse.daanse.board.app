/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime'
import type {
  Datastreams,
  ObservedProperties,
  ObservedProperty
} from '../models/index'
import {
  DatastreamsFromJSON,
  DatastreamsToJSON,
  ObservedPropertiesFromJSON,
  ObservedPropertiesToJSON,
  ObservedPropertyFromJSON,
  ObservedPropertyToJSON
} from '../models/index'

export interface V11ObservedPropertiesEntityIdDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservedPropertiesEntityIdGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservedPropertiesGetRequest {
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

/**
 *
 */
export class ObservedPropertiesApi extends runtime.BaseAPI {

  /**
   * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
   * Get all datastreams for an observed property
   */
  async v11ObservedPropertiesEntityIdDatastreamsGetRaw(requestParameters: V11ObservedPropertiesEntityIdDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservedPropertiesEntityIdDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/ObservedProperties({entityId})/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   * Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)
   * Get all datastreams for an observed property
   */
  async v11ObservedPropertiesEntityIdDatastreamsGet(requestParameters: V11ObservedPropertiesEntityIdDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11ObservedPropertiesEntityIdDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the observed property identified by **entityId**
   * Get information about an individual observed property
   */
  async v11ObservedPropertiesEntityIdGetRaw(requestParameters: V11ObservedPropertiesEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservedProperty>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservedPropertiesEntityIdGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/ObservedProperties({entityId})`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservedPropertyFromJSON(jsonValue))
  }

  /**
   * Returns information about the observed property identified by **entityId**
   * Get information about an individual observed property
   */
  async v11ObservedPropertiesEntityIdGet(requestParameters: V11ObservedPropertiesEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservedProperty> {
    const response = await this.v11ObservedPropertiesEntityIdGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all the observed properties provided by this api (subject to any parameters set)
   * Get all observed properties
   */
  async v11ObservedPropertiesGetRaw(requestParameters: V11ObservedPropertiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservedProperties>> {
    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/ObservedProperties`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservedPropertiesFromJSON(jsonValue))
  }

  /**
   * Returns all the observed properties provided by this api (subject to any parameters set)
   * Get all observed properties
   */
  async v11ObservedPropertiesGet(requestParameters: V11ObservedPropertiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservedProperties> {
    const response = await this.v11ObservedPropertiesGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

}
