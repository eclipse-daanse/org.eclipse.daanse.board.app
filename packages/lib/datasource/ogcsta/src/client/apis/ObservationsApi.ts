/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime'
import type {
  Datastream,
  Datastreams,
  FeatureOfInterest,
  Locations,
  Observation,
  Observations,
  ObservedProperty,
  Sensor,
  Thing
} from '../models/index'
import {
  DatastreamFromJSON,
  DatastreamToJSON,
  DatastreamsFromJSON,
  DatastreamsToJSON,
  FeatureOfInterestFromJSON,
  FeatureOfInterestToJSON,
  LocationsFromJSON,
  LocationsToJSON,
  ObservationFromJSON,
  ObservationToJSON,
  ObservationsFromJSON,
  ObservationsToJSON,
  ObservedPropertyFromJSON,
  ObservedPropertyToJSON,
  SensorFromJSON,
  SensorToJSON,
  ThingFromJSON,
  ThingToJSON
} from '../models/index'

export interface V11ObservationsEntityIdDatastreamGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservationsEntityIdDatastreamObservationsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservationsEntityIdDatastreamObservedPropertyGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservationsEntityIdDatastreamSensorDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservationsEntityIdDatastreamSensorGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservationsEntityIdDatastreamThingDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservationsEntityIdDatastreamThingGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservationsEntityIdDatastreamThingLocationsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservationsEntityIdFeatureOfInterestGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservationsEntityIdFeatureOfInterestObservationsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ObservationsEntityIdGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ObservationsGetRequest {
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

/**
 *
 */
export class ObservationsApi extends runtime.BaseAPI {

  /**
   * Returns information about the datastream for the observation identified by **entityId**
   * Get information about an observation\'s datastream
   */
  async v11ObservationsEntityIdDatastreamGetRaw(requestParameters: V11ObservationsEntityIdDatastreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastream>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamFromJSON(jsonValue))
  }

  /**
   * Returns information about the datastream for the observation identified by **entityId**
   * Get information about an observation\'s datastream
   */
  async v11ObservationsEntityIdDatastreamGet(requestParameters: V11ObservationsEntityIdDatastreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastream> {
    const response = await this.v11ObservationsEntityIdDatastreamGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
   * Get all observations for an observations\'s datastream
   */
  async v11ObservationsEntityIdDatastreamObservationsGetRaw(requestParameters: V11ObservationsEntityIdDatastreamObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Observations>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamObservationsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/Observations`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservationsFromJSON(jsonValue))
  }

  /**
   * Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)
   * Get all observations for an observations\'s datastream
   */
  async v11ObservationsEntityIdDatastreamObservationsGet(requestParameters: V11ObservationsEntityIdDatastreamObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Observations> {
    const response = await this.v11ObservationsEntityIdDatastreamObservationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGetRaw(requestParameters: V11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGet(requestParameters: V11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11ObservationsEntityIdDatastreamObservedPropertyDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamObservedPropertyGetRaw(requestParameters: V11ObservationsEntityIdDatastreamObservedPropertyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservedProperty>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamObservedPropertyGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/ObservedProperty`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservedPropertyFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamObservedPropertyGet(requestParameters: V11ObservationsEntityIdDatastreamObservedPropertyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservedProperty> {
    const response = await this.v11ObservationsEntityIdDatastreamObservedPropertyGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamSensorDatastreamsGetRaw(requestParameters: V11ObservationsEntityIdDatastreamSensorDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamSensorDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamSensorDatastreamsGet(requestParameters: V11ObservationsEntityIdDatastreamSensorDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11ObservationsEntityIdDatastreamSensorDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamSensorGetRaw(requestParameters: V11ObservationsEntityIdDatastreamSensorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sensor>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamSensorGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/Sensor`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => SensorFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamSensorGet(requestParameters: V11ObservationsEntityIdDatastreamSensorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sensor> {
    const response = await this.v11ObservationsEntityIdDatastreamSensorGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamThingDatastreamsGetRaw(requestParameters: V11ObservationsEntityIdDatastreamThingDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamThingDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/Thing/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamThingDatastreamsGet(requestParameters: V11ObservationsEntityIdDatastreamThingDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11ObservationsEntityIdDatastreamThingDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamThingGetRaw(requestParameters: V11ObservationsEntityIdDatastreamThingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thing>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamThingGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/Thing`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ThingFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamThingGet(requestParameters: V11ObservationsEntityIdDatastreamThingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thing> {
    const response = await this.v11ObservationsEntityIdDatastreamThingGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamThingLocationsGetRaw(requestParameters: V11ObservationsEntityIdDatastreamThingLocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Locations>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdDatastreamThingLocationsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/Datastream/Thing/Locations`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => LocationsFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdDatastreamThingLocationsGet(requestParameters: V11ObservationsEntityIdDatastreamThingLocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Locations> {
    const response = await this.v11ObservationsEntityIdDatastreamThingLocationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the feature of interest for the observation identified by **entityId**
   * Get information about an observation\'s feature of interest
   */
  async v11ObservationsEntityIdFeatureOfInterestGetRaw(requestParameters: V11ObservationsEntityIdFeatureOfInterestGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureOfInterest>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdFeatureOfInterestGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/FeatureOfInterest`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => FeatureOfInterestFromJSON(jsonValue))
  }

  /**
   * Returns information about the feature of interest for the observation identified by **entityId**
   * Get information about an observation\'s feature of interest
   */
  async v11ObservationsEntityIdFeatureOfInterestGet(requestParameters: V11ObservationsEntityIdFeatureOfInterestGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureOfInterest> {
    const response = await this.v11ObservationsEntityIdFeatureOfInterestGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   */
  async v11ObservationsEntityIdFeatureOfInterestObservationsGetRaw(requestParameters: V11ObservationsEntityIdFeatureOfInterestObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Observations>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdFeatureOfInterestObservationsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})/FeatureOfInterest/Observations`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservationsFromJSON(jsonValue))
  }

  /**
   */
  async v11ObservationsEntityIdFeatureOfInterestObservationsGet(requestParameters: V11ObservationsEntityIdFeatureOfInterestObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Observations> {
    const response = await this.v11ObservationsEntityIdFeatureOfInterestObservationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the observation identified by **entityId**
   * Get information about an individual observation
   */
  async v11ObservationsEntityIdGetRaw(requestParameters: V11ObservationsEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Observation>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ObservationsEntityIdGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations({entityId})`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservationFromJSON(jsonValue))
  }

  /**
   * Returns information about the observation identified by **entityId**
   * Get information about an individual observation
   */
  async v11ObservationsEntityIdGet(requestParameters: V11ObservationsEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Observation> {
    const response = await this.v11ObservationsEntityIdGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all the observations provided by this api (subject to any parameters set)
   * Get all observations
   */
  async v11ObservationsGetRaw(requestParameters: V11ObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Observations>> {
    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Observations`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservationsFromJSON(jsonValue))
  }

  /**
   * Returns all the observations provided by this api (subject to any parameters set)
   * Get all observations
   */
  async v11ObservationsGet(requestParameters: V11ObservationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Observations> {
    const response = await this.v11ObservationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

}
