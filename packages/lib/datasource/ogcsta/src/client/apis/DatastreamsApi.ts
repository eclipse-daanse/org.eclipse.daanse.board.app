/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime'
import type {
  Datastream,
  Datastreams,
  Locations,
  Observations,
  ObservedProperty,
  Sensor,
  Thing
} from '../models/index'
import {
  DatastreamFromJSON,
  DatastreamToJSON,
  DatastreamsFromJSON,
  DatastreamsToJSON,
  LocationsFromJSON,
  LocationsToJSON,
  ObservationsFromJSON,
  ObservationsToJSON,
  ObservedPropertyFromJSON,
  ObservedPropertyToJSON,
  SensorFromJSON,
  SensorToJSON,
  ThingFromJSON,
  ThingToJSON
} from '../models/index'

export interface V11DatastreamsEntityIdGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11DatastreamsEntityIdObservationsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11DatastreamsEntityIdObservedPropertyDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11DatastreamsEntityIdObservedPropertyGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11DatastreamsEntityIdSensorDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11DatastreamsEntityIdSensorGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11DatastreamsEntityIdThingDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11DatastreamsEntityIdThingGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11DatastreamsEntityIdThingLocationsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11DatastreamsGetRequest {
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

/**
 *
 */
export class DatastreamsApi extends runtime.BaseAPI {

  /**
   * Returns information about the datastream identified by **entityId**
   * Get information about an individual datastream
   */
  async v11DatastreamsEntityIdGetRaw(requestParameters: V11DatastreamsEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastream>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamFromJSON(jsonValue))
  }

  /**
   * Returns information about the datastream identified by **entityId**
   * Get information about an individual datastream
   */
  async v11DatastreamsEntityIdGet(requestParameters: V11DatastreamsEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastream> {
    const response = await this.v11DatastreamsEntityIdGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all observations for a datastream
   */
  async v11DatastreamsEntityIdObservationsGetRaw(requestParameters: V11DatastreamsEntityIdObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Observations>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdObservationsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/Observations`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservationsFromJSON(jsonValue))
  }

  /**
   * Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all observations for a datastream
   */
  async v11DatastreamsEntityIdObservationsGet(requestParameters: V11DatastreamsEntityIdObservationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Observations> {
    const response = await this.v11DatastreamsEntityIdObservationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all datastreams that provide a datastream\'s observed property
   */
  async v11DatastreamsEntityIdObservedPropertyDatastreamsGetRaw(requestParameters: V11DatastreamsEntityIdObservedPropertyDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdObservedPropertyDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   * Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all datastreams that provide a datastream\'s observed property
   */
  async v11DatastreamsEntityIdObservedPropertyDatastreamsGet(requestParameters: V11DatastreamsEntityIdObservedPropertyDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11DatastreamsEntityIdObservedPropertyDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the observed property for the datastream identified by **entityId**
   * Get information about a datastream\'s observed property
   */
  async v11DatastreamsEntityIdObservedPropertyGetRaw(requestParameters: V11DatastreamsEntityIdObservedPropertyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservedProperty>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdObservedPropertyGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/ObservedProperty`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ObservedPropertyFromJSON(jsonValue))
  }

  /**
   * Returns information about the observed property for the datastream identified by **entityId**
   * Get information about a datastream\'s observed property
   */
  async v11DatastreamsEntityIdObservedPropertyGet(requestParameters: V11DatastreamsEntityIdObservedPropertyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservedProperty> {
    const response = await this.v11DatastreamsEntityIdObservedPropertyGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all datastreams which share a datastream\'s sensor type
   */
  async v11DatastreamsEntityIdSensorDatastreamsGetRaw(requestParameters: V11DatastreamsEntityIdSensorDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdSensorDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/Sensor/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   * Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all datastreams which share a datastream\'s sensor type
   */
  async v11DatastreamsEntityIdSensorDatastreamsGet(requestParameters: V11DatastreamsEntityIdSensorDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11DatastreamsEntityIdSensorDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the sensor type for the datastream identified by **entityId**
   * Get information about a datastream\'s sensor type
   */
  async v11DatastreamsEntityIdSensorGetRaw(requestParameters: V11DatastreamsEntityIdSensorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sensor>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdSensorGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/Sensor`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => SensorFromJSON(jsonValue))
  }

  /**
   * Returns information about the sensor type for the datastream identified by **entityId**
   * Get information about a datastream\'s sensor type
   */
  async v11DatastreamsEntityIdSensorGet(requestParameters: V11DatastreamsEntityIdSensorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sensor> {
    const response = await this.v11DatastreamsEntityIdSensorGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all datastreams provided by a datastream\'s thing
   */
  async v11DatastreamsEntityIdThingDatastreamsGetRaw(requestParameters: V11DatastreamsEntityIdThingDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdThingDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/Thing/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   * Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all datastreams provided by a datastream\'s thing
   */
  async v11DatastreamsEntityIdThingDatastreamsGet(requestParameters: V11DatastreamsEntityIdThingDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11DatastreamsEntityIdThingDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the thing for the datastream identified by **entityId**
   * Get information about a datastream\'s thing
   */
  async v11DatastreamsEntityIdThingGetRaw(requestParameters: V11DatastreamsEntityIdThingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thing>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdThingGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/Thing`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ThingFromJSON(jsonValue))
  }

  /**
   * Returns information about the thing for the datastream identified by **entityId**
   * Get information about a datastream\'s thing
   */
  async v11DatastreamsEntityIdThingGet(requestParameters: V11DatastreamsEntityIdThingGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thing> {
    const response = await this.v11DatastreamsEntityIdThingGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all locations for a datastream\'s thing
   */
  async v11DatastreamsEntityIdThingLocationsGetRaw(requestParameters: V11DatastreamsEntityIdThingLocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Locations>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11DatastreamsEntityIdThingLocationsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams({entityId})/Thing/Locations`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => LocationsFromJSON(jsonValue))
  }

  /**
   * Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)
   * Get all locations for a datastream\'s thing
   */
  async v11DatastreamsEntityIdThingLocationsGet(requestParameters: V11DatastreamsEntityIdThingLocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Locations> {
    const response = await this.v11DatastreamsEntityIdThingLocationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all the datastreams provided by this api (subject to any parameters set)
   * Get all datastreams
   */
  async v11DatastreamsGetRaw(requestParameters: V11DatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Datastreams`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   * Returns all the datastreams provided by this api (subject to any parameters set)
   * Get all datastreams
   */
  async v11DatastreamsGet(requestParameters: V11DatastreamsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11DatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

}
