/* tslint:disable */
/* eslint-disable */
/**
 * British Geological Survey Sensors API
 * The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime'
import type {
  Datastreams,
  Locations,
  Thing,
  Things
} from '../models/index'
import {
  DatastreamsFromJSON,
  DatastreamsToJSON,
  LocationsFromJSON,
  LocationsToJSON,
  ThingFromJSON,
  ThingToJSON,
  ThingsFromJSON,
  ThingsToJSON
} from '../models/index'

export interface V11ThingsEntityIdDatastreamsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ThingsEntityIdGetRequest {
  entityId: string;
  $select?: string;
  $expand?: string;
}

export interface V11ThingsEntityIdLocationsGetRequest {
  entityId: string;
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

export interface V11ThingsGetRequest {
  $skip?: number;
  $top?: number;
  $count?: boolean;
  $select?: string;
  $expand?: string;
  $filter?: string;
}

/**
 *
 */
export class ThingsApi extends runtime.BaseAPI {

  /**
   * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
   * Get all datastreams for a thing
   */
  async v11ThingsEntityIdDatastreamsGetRaw(requestParameters: V11ThingsEntityIdDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Datastreams>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ThingsEntityIdDatastreamsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Things({entityId})/Datastreams`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => DatastreamsFromJSON(jsonValue))
  }

  /**
   * Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)
   * Get all datastreams for a thing
   */
  async v11ThingsEntityIdDatastreamsGet(requestParameters: V11ThingsEntityIdDatastreamsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Datastreams> {
    const response = await this.v11ThingsEntityIdDatastreamsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the thing identified by **entityId**
   * Get information about an individual thing
   */
  async v11ThingsEntityIdGetRaw(requestParameters: V11ThingsEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Thing>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ThingsEntityIdGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Things({entityId})`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ThingFromJSON(jsonValue))
  }

  /**
   * Returns information about the thing identified by **entityId**
   * Get information about an individual thing
   */
  async v11ThingsEntityIdGet(requestParameters: V11ThingsEntityIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Thing> {
    const response = await this.v11ThingsEntityIdGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns information about the location for the thing identified by **entityId**
   * Get information about a things\'s location
   */
  async v11ThingsEntityIdLocationsGetRaw(requestParameters: V11ThingsEntityIdLocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Locations>> {
    if (requestParameters['entityId'] == null) {
      throw new runtime.RequiredError(
        'entityId',
        'Required parameter "entityId" was null or undefined when calling v11ThingsEntityIdLocationsGet().'
      )
    }

    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Things({entityId})/Locations`.replace(`{${'entityId'}}`, encodeURIComponent(String(requestParameters['entityId']))),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => LocationsFromJSON(jsonValue))
  }

  /**
   * Returns information about the location for the thing identified by **entityId**
   * Get information about a things\'s location
   */
  async v11ThingsEntityIdLocationsGet(requestParameters: V11ThingsEntityIdLocationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Locations> {
    const response = await this.v11ThingsEntityIdLocationsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

  /**
   * Returns all the things provided by this api (subject to any parameters set)
   * Get all things
   */
  async v11ThingsGetRaw(requestParameters: V11ThingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Things>> {
    const queryParameters: any = {}

    if (requestParameters['$skip'] != null) {
      queryParameters['$skip'] = requestParameters['$skip']
    }

    if (requestParameters['$top'] != null) {
      queryParameters['$top'] = requestParameters['$top']
    }

    if (requestParameters['$count'] != null) {
      queryParameters['$count'] = requestParameters['$count']
    }

    if (requestParameters['$select'] != null) {
      queryParameters['$select'] = requestParameters['$select']
    }

    if (requestParameters['$expand'] != null) {
      queryParameters['$expand'] = requestParameters['$expand']
    }

    if (requestParameters['$filter'] != null) {
      queryParameters['$filter'] = requestParameters['$filter']
    }

    const headerParameters: runtime.HTTPHeaders = {}

    const response = await this.request({
      path: `/v1.1/Things`,
      method: 'GET',
      headers: headerParameters,
      query: queryParameters
    }, initOverrides)

    return new runtime.JSONApiResponse(response, (jsonValue) => ThingsFromJSON(jsonValue))
  }

  /**
   * Returns all the things provided by this api (subject to any parameters set)
   * Get all things
   */
  async v11ThingsGet(requestParameters: V11ThingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Things> {
    const response = await this.v11ThingsGetRaw(requestParameters, initOverrides)
    return await response.value()
  }

}
